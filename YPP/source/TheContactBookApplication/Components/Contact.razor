@using TheContactBookApplication.Models;
@using TheContactBookApplication.Data;

@inject ContactsDbContext contactsDbContext;

@if (ContactModel == null && WantToAddContact == false)
{
    <div class="title">
        <table>
            <tr>
                <td> First Name </td>
                <td> Last Name </td>
                <td> Street Name </td>
                <td> House Number </td>
                <td> Apartment Number </td>
                <td> Postal Code </td>
                <td> Town </td>
                <td> Phone Number </td>
                <td> Date Of Birth </td>
                <td> Age </td>
            </tr>
        </table>
    </div>
}
@if (ContactModel != null)
{
    @if (WantToEditContact == false)
    {
        <div class="contact">
            <div class="contact-row">
                <table>
                    <tr>
                        <td> @ContactModel.FirstName </td>
                        <td> @ContactModel.LastName </td>
                        <td> @ContactModel.StreetName </td>
                        <td> @ContactModel.HouseNumber </td>
                        <td> @ApartmentNumber </td>
                        <td> @ContactModel.PostalCode </td>
                        <td> @ContactModel.Town </td>
                        <td> @ContactModel.PhoneNumber </td>
                        <td> @DateOfBirth </td>
                        <td> @Age </td>
                    </tr>
                </table>
            </div>

            <EditContactButton WantToEditChanged="GetWantToEdit" />

            <DeleteContactButton DeleteContact="DeleteContact" />
        </div>
    }
    else
    {
        <div class="contact">
        <UserDataEdit ContactModel="@ContactModel" ContactEdited="GetEditedContact" />
        </div>
    }
}
@if (WantToAddContact == true)
{
    <UserDataInput ContactAdded="GetNewContact" TodayInputFormat="@TodayInputFormat" />
}


@code {
    [Parameter]
    public ContactModel? ContactModel { get; set; }

    public ContactModel? NewContactModel { get; set; } = new ContactModel();

    [Parameter]
    public bool WantToAddContact { get; set; } = false;

    [Parameter]
    public int Iteration { get; set; }

    public bool WantToEditContact { get; set; } = false;

    public bool WasAdded { get; set; } = false;

    public bool WasEdited { get; set; } = false;

    public DateTime Today { get; set; }

    public string? TodayInputFormat { get; set; 
    }

    public string? ApartmentNumber { get; set; }

    public string? DateOfBirth { get; set; }

    public double Age { get; set; }

    [Parameter]
    public EventCallback<ContactModel> ContactAdded { get; set; }

    [Parameter]
    public EventCallback<ContactModel> ContactEdited { get; set; }

    [Parameter]
    public EventCallback<int> ContactEditedId { get; set; }

    [Parameter]
    public EventCallback<ContactModel> ContactDeleted { get; set; }

    protected override void OnParametersSet()
    {
        OnInitialized();
    }

    protected override void OnInitialized()
    {
        CheckIfApartmentNumberExists();
        PrepareDataFormat();
        CountAge();
    }

    void CheckIfApartmentNumberExists()
    {
        if (ContactModel != null && ContactModel.ApartmentNumber != null)
        {
            ApartmentNumber = ContactModel.ApartmentNumber.ToString();
        }
        else
        {
            ApartmentNumber = "-";
        }
    }

    void PrepareDataFormat()
    {
        Today = DateTime.UtcNow.Date;

        if (ContactModel != null)
        {
            DateOfBirth = ContactModel.DateOfBirth.ToString("dd/MM/yyyy");
        }

        TodayInputFormat = Today.ToString("yyyy-MM-dd");
    }

    void CountAge()
    {
        Age = 0;

        if (ContactModel != null)
        {

            while (Today.CompareTo(ContactModel.DateOfBirth) >= 0)
            {
                Age++;
                Today = Today.AddYears(-1);
            }
            Today = Today.AddYears(1);
            Age--;
        }
    }

    private async Task DeleteContact()
    {
        if (this.ContactModel != null)
        {
            contactsDbContext.ContactModels.Remove(this.ContactModel);
            await ContactDeleted.InvokeAsync(this.ContactModel);
        }
    }

    void GetNewContact(ContactModel newContactModel)
    {
        WantToAddContact = false;

        WasAdded = true;

        NewContactModel = newContactModel;
        ContactAdded.InvokeAsync(NewContactModel);

        if (NewContactModel != null)
        {
            contactsDbContext.ContactModels.Add(this.NewContactModel); 
        }
    }

    void GetEditedContact(ContactModel newContactModel)
    {
        WantToEditContact = false;

        WasEdited = true;

        NewContactModel = newContactModel;
        ContactEditedId.InvokeAsync(Iteration);
        ContactEdited.InvokeAsync(NewContactModel);

        if (NewContactModel != null)
        {
            contactsDbContext.ContactModels.Update(this.NewContactModel);
        }
    }

    void GetWantToEdit(bool wantToEdit)
    {
        WantToEditContact = wantToEdit;
    }
}
