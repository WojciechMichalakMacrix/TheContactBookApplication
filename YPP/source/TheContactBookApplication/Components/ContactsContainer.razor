@using TheContactBookApplication.Models;
@using TheContactBookApplication.Services;
@using TheContactBookApplication.Data;

@inject IContactsInfoProvider contactsInfoProvider;

<div class="contacts-container">

    <Contact />

    @if (Contacts != null)
    {
        @for(int i = 0; i < Contacts.Count; i++)
        {
            var contact = Contacts[i];
            <Contact ContactModel="contact" Iteration="@i" ContactEdited="EditContactLocally" ContactEditedId="GetEditedContactId" ContactDeleted="DeleteContactLocally"/>
        }
    }

    @if(WantToAdd == true)
    {
        <Contact WantToAddContact="@WantToAdd" ContactAdded="AddContactLocally" />
    }
    else
    {
       <AddContactButton WantToAddChanged="@GetWantToAddValue"/> 
    }
    
    @if(DatabaseNeedsUpdate == true)
    {
        <div class="db-update"> 
            <div class="text"> 
                Changes detected. Do you want to update the database?
            </div>
        <DatabaseUpdateButtons />
        </div>
    }



</div>

@code {
    public List<ContactModel>? Contacts { get; set; }

    public List<ContactModel>? DatabaseContacts { get; set; }

    public int ContactId { get; set; }

    public bool WantToAdd { get; set; } = false;

    public bool DatabaseNeedsUpdate { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    public async Task LoadDataAsync()
    {
        Contacts = await contactsInfoProvider.GetContactsInfoAsync();
    }

    public void GetWantToAddValue(bool wantToAdd)
    {
        WantToAdd = wantToAdd;
    }

    public async Task AddContactLocally(ContactModel newContactModel)
    {
        WantToAdd = false;

        Contacts.Add(newContactModel);

        await DatabaseAndLocalComparison();
    }

    public void GetEditedContactId(int id)
    {
        ContactId = id;
    }

    public async Task EditContactLocally(ContactModel editedContactModel)
    {
        Contacts[ContactId] = editedContactModel;

        await DatabaseAndLocalComparison();
    }

    public async Task DeleteContactLocally(ContactModel deletedContactModel)
    {
        Contacts.Remove(deletedContactModel);

        await DatabaseAndLocalComparison();
    }

    public async Task DatabaseAndLocalComparison()
    {
        DatabaseContacts = await contactsInfoProvider.GetContactsInfoAsync();

        if(DatabaseContacts.Equals(Contacts))
        {
            DatabaseNeedsUpdate = false;
        }
        else
        {
            DatabaseNeedsUpdate = true;
        }
    }
}
